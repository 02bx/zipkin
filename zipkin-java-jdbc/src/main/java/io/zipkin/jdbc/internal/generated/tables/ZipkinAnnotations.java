/**
 * Copyright 2015 The OpenZipkin Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/**
 * This class is generated by jOOQ
 */
package io.zipkin.jdbc.internal.generated.tables;


import io.zipkin.jdbc.internal.generated.Zipkin;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipkinAnnotations extends TableImpl<Record> {

	private static final long serialVersionUID = -1070710326;

	/**
	 * The reference instance of <code>zipkin.zipkin_annotations</code>
	 */
	public static final ZipkinAnnotations ZIPKIN_ANNOTATIONS = new ZipkinAnnotations();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>zipkin.zipkin_annotations.trace_id</code>. coincides with zipkin_spans.trace_id
	 */
	public final TableField<Record, Long> TRACE_ID = createField("trace_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.trace_id");

	/**
	 * The column <code>zipkin.zipkin_annotations.span_id</code>. coincides with zipkin_spans.span_id
	 */
	public final TableField<Record, Long> SPAN_ID = createField("span_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.span_id");

	/**
	 * The column <code>zipkin.zipkin_annotations.key</code>. BinaryAnnotation.key() or Annotation.value() if a_type == -1
	 */
	public final TableField<Record, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "BinaryAnnotation.key() or Annotation.value() if a_type == -1");

	/**
	 * The column <code>zipkin.zipkin_annotations.value</code>. BinaryAnnotation.value(), which must be smaller than 64KB
	 */
	public final TableField<Record, byte[]> VALUE = createField("value", org.jooq.impl.SQLDataType.BLOB, this, "BinaryAnnotation.value(), which must be smaller than 64KB");

	/**
	 * The column <code>zipkin.zipkin_annotations.type</code>. BinaryAnnotation.type() or -1 if Annotation
	 */
	public final TableField<Record, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "BinaryAnnotation.type() or -1 if Annotation");

	/**
	 * The column <code>zipkin.zipkin_annotations.timestamp</code>. Used to implement TTL; Annotation.timestamp() or zipkin_spans.timestamp_micros
	 */
	public final TableField<Record, Long> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.BIGINT, this, "Used to implement TTL; Annotation.timestamp() or zipkin_spans.timestamp_micros");

	/**
	 * The column <code>zipkin.zipkin_annotations.host_ipv4</code>. Null when Binary/Annotation.host() is null
	 */
	public final TableField<Record, Integer> HOST_IPV4 = createField("host_ipv4", org.jooq.impl.SQLDataType.INTEGER, this, "Null when Binary/Annotation.host() is null");

	/**
	 * The column <code>zipkin.zipkin_annotations.host_port</code>. Null when Binary/Annotation.host() is null
	 */
	public final TableField<Record, Short> HOST_PORT = createField("host_port", org.jooq.impl.SQLDataType.SMALLINT, this, "Null when Binary/Annotation.host() is null");

	/**
	 * The column <code>zipkin.zipkin_annotations.host_service_name</code>. Null when Binary/Annotation.host() is null
	 */
	public final TableField<Record, String> HOST_SERVICE_NAME = createField("host_service_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "Null when Binary/Annotation.host() is null");

	/**
	 * Create a <code>zipkin.zipkin_annotations</code> table reference
	 */
	public ZipkinAnnotations() {
		this("zipkin_annotations", null);
	}

	/**
	 * Create an aliased <code>zipkin.zipkin_annotations</code> table reference
	 */
	public ZipkinAnnotations(String alias) {
		this(alias, ZIPKIN_ANNOTATIONS);
	}

	private ZipkinAnnotations(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private ZipkinAnnotations(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Zipkin.ZIPKIN, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ZipkinAnnotations as(String alias) {
		return new ZipkinAnnotations(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ZipkinAnnotations rename(String name) {
		return new ZipkinAnnotations(name, null);
	}
}
