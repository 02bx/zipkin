/**
 * Copyright 2015 The OpenZipkin Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/**
 * This class is generated by jOOQ
 */
package io.zipkin.jdbc.internal.generated.tables;


import io.zipkin.jdbc.internal.generated.Zipkin;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipkinDependencyLinks extends TableImpl<Record> {

	private static final long serialVersionUID = -2120591302;

	/**
	 * The reference instance of <code>zipkin.zipkin_dependency_links</code>
	 */
	public static final ZipkinDependencyLinks ZIPKIN_DEPENDENCY_LINKS = new ZipkinDependencyLinks();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>zipkin.zipkin_dependency_links.dlid</code>.
	 */
	public final TableField<Record, Long> DLID = createField("dlid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.parent</code>.
	 */
	public final TableField<Record, String> PARENT = createField("parent", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.child</code>.
	 */
	public final TableField<Record, String> CHILD = createField("child", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.m0</code>.
	 */
	public final TableField<Record, Long> M0 = createField("m0", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.m1</code>.
	 */
	public final TableField<Record, Double> M1 = createField("m1", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.m2</code>.
	 */
	public final TableField<Record, Double> M2 = createField("m2", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.m3</code>.
	 */
	public final TableField<Record, Double> M3 = createField("m3", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * The column <code>zipkin.zipkin_dependency_links.m4</code>.
	 */
	public final TableField<Record, Double> M4 = createField("m4", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

	/**
	 * Create a <code>zipkin.zipkin_dependency_links</code> table reference
	 */
	public ZipkinDependencyLinks() {
		this("zipkin_dependency_links", null);
	}

	/**
	 * Create an aliased <code>zipkin.zipkin_dependency_links</code> table reference
	 */
	public ZipkinDependencyLinks(String alias) {
		this(alias, ZIPKIN_DEPENDENCY_LINKS);
	}

	private ZipkinDependencyLinks(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private ZipkinDependencyLinks(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Zipkin.ZIPKIN, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ZipkinDependencyLinks as(String alias) {
		return new ZipkinDependencyLinks(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ZipkinDependencyLinks rename(String name) {
		return new ZipkinDependencyLinks(name, null);
	}
}
