diff --git a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/CompilerThriftCodecFactory.java b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/CompilerThriftCodecFactory.java
index 524297b..7d37b30 100644
--- a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/CompilerThriftCodecFactory.java
+++ b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/CompilerThriftCodecFactory.java
@@ -44,7 +44,7 @@ public CompilerThriftCodecFactory(@ForCompiler ClassLoader parent)
 
     public CompilerThriftCodecFactory(boolean debug)
     {
-        this(debug, getPriviledgedClassLoader(CompilerThriftCodecFactory.class.getClassLoader()));
+        this(debug, CompilerThriftCodecFactory.class.getClassLoader());
     }
 
     public CompilerThriftCodecFactory(boolean debug, ClassLoader parent)
diff --git a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/DynamicClassLoader.java b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/DynamicClassLoader.java
index 963b9a9..71beae2 100644
--- a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/DynamicClassLoader.java
+++ b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/DynamicClassLoader.java
@@ -15,21 +15,56 @@
  */
 package com.facebook.swift.codec.internal.compiler;
 
-import com.facebook.swift.codec.ThriftCodec;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+import static com.google.common.base.Throwables.propagate;
 
 /**
- * A ClassLoader that allows for loading of classes from an array of bytes.
+ * Codecs are defined at runtime in the same package as their type parameters. We avoid access
+ * issues by defining them in the same classloader.
  */
-public class DynamicClassLoader extends ClassLoader
+public class DynamicClassLoader
 {
-    public DynamicClassLoader(ClassLoader parent)
+    final ClassLoader delegate;
+    private final Method defineClass;
+
+    DynamicClassLoader(ClassLoader delegate)
     {
-        super(parent);
+        this.delegate = delegate;
+        try {
+            this.defineClass = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
+            this.defineClass.setAccessible(true);
+        }
+        catch (NoSuchMethodException e) {
+            throw new AssertionError(e);
+        }
     }
 
-    public Class<?> defineClass(String name, byte[] byteCode)
-            throws ClassFormatError
+    /**
+     * In normal case, there is a single swift codec generating a given type within the scope of a
+     * classloader. This means a codec class would normally be generated only once per type. In
+     * case of misconfiguration, this falls back to loading the type instead of propagating an error
+     * when the codec already exists.
+     */
+    Class<?> defineOrLoadClass(String name, byte[] byteCode)
     {
-        return defineClass(name, byteCode, 0, byteCode.length);
+        try {
+            return (Class<?>) defineClass.invoke(delegate, name, byteCode, 0, byteCode.length);
+        }
+        catch (IllegalAccessException e) {
+            throw new AssertionError(e); // already set accessible, so this shouldn't happen.
+        }
+        catch (InvocationTargetException e) {
+            if (e.getCause() instanceof LinkageError) {
+                try {
+                    return delegate.loadClass(name);
+                }
+                catch (ClassNotFoundException cnfe) {
+                    // linkage error wasn't due to lost race
+                }
+            }
+            throw propagate(e.getCause());
+        }
     }
 }
diff --git a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/ThriftCodecByteCodeGenerator.java b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/ThriftCodecByteCodeGenerator.java
index 6ec7c11..815de4c 100644
--- a/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/ThriftCodecByteCodeGenerator.java
+++ b/swift-codec/src/main/java/com/facebook/swift/codec/internal/compiler/ThriftCodecByteCodeGenerator.java
@@ -95,8 +95,6 @@
 @NotThreadSafe
 public class ThriftCodecByteCodeGenerator<T>
 {
-    private static final String PACKAGE = "$wift";
-
     private static final Map<ThriftProtocolType, Method> READ_METHODS;
     private static final Map<ThriftProtocolType, Method> WRITE_METHODS;
 
@@ -172,11 +170,11 @@ public ThriftCodecByteCodeGenerator(
         // Run the asm verifier only in debug mode (prints a ton of info)
         if (debug) {
             ClassReader reader = new ClassReader(byteCode);
-            CheckClassAdapter.verify(reader, classLoader, true, new PrintWriter(System.out));
+            CheckClassAdapter.verify(reader, classLoader.delegate, true, new PrintWriter(System.out));
         }
 
         // load the class
-        Class<?> codecClass = classLoader.defineClass(codecType.getClassName().replace('/', '.'), byteCode);
+        Class<?> codecClass = classLoader.defineOrLoadClass(codecType.getClassName().replace('/', '.'), byteCode);
         try {
             Class<?>[] types = parameters.getTypes();
             Constructor<?> constructor = codecClass.getConstructor(types);
@@ -1091,7 +1089,7 @@ private boolean needsCodec(ThriftFieldMetadata fieldMetadata)
 
     private ParameterizedType toCodecType(ThriftStructMetadata metadata)
     {
-        return type(PACKAGE + "/" + type(metadata.getStructClass()).getClassName() + "Codec");
+        return type(type(metadata.getStructClass()).getClassName() + "Codec");
     }
 
     private static class ConstructorParameters
diff --git a/swift-codec/src/main/java/com/facebook/swift/codec/metadata/AbstractThriftMetadataBuilder.java b/swift-codec/src/main/java/com/facebook/swift/codec/metadata/AbstractThriftMetadataBuilder.java
index 5c025e7..3d2cbaa 100644
--- a/swift-codec/src/main/java/com/facebook/swift/codec/metadata/AbstractThriftMetadataBuilder.java
+++ b/swift-codec/src/main/java/com/facebook/swift/codec/metadata/AbstractThriftMetadataBuilder.java
@@ -34,6 +34,7 @@
 import javax.annotation.concurrent.NotThreadSafe;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -173,9 +174,8 @@ protected final void verifyClass(Class<? extends Annotation> annotation)
         String annotationName = annotation.getSimpleName();
         String structClassName = getStructClass().getName();
 
-        // Verify struct class is public and final
-        if (!Modifier.isPublic(getStructClass().getModifiers())) {
-            metadataErrors.addError("%s class '%s' is not public", annotationName, structClassName);
+        if (Modifier.isPrivate(getStructClass().getModifiers())) {
+            metadataErrors.addError("%s class '%s' is private", annotationName, structClassName);
         }
 
         if (!getStructClass().isAnnotationPresent(annotation)) {
@@ -237,13 +237,14 @@ protected final void addConstructors(Type type)
         if (constructorInjections.isEmpty()) {
             try {
                 Constructor<?> constructor = clazz.getDeclaredConstructor();
-                if (!Modifier.isPublic(constructor.getModifiers())) {
-                    metadataErrors.addError("Default constructor '%s' is not public", constructor.toGenericString());
+                if (Modifier.isPrivate(constructor.getModifiers())) {
+                    metadataErrors.addError("Default constructor '%s' is private", constructor.toGenericString());
                 }
+                setAccessibleIfNeeded(constructor);
                 constructorInjections.add(new ConstructorInjection(constructor));
             }
             catch (NoSuchMethodException e) {
-                metadataErrors.addError("Struct class '%s' does not have a public no-arg constructor", clazz.getName());
+                metadataErrors.addError("Struct class '%s' does not have a public or protected no-arg constructor", clazz.getName());
             }
         }
 
@@ -262,7 +263,7 @@ protected final void addBuilderMethods()
             // parameters are null if the method is misconfigured
             if (parameters != null) {
                 fields.addAll(parameters);
-                builderMethodInjections.add(new MethodInjection(method, parameters));
+                builderMethodInjections.add(new MethodInjection(implementingMethod(method), parameters));
             }
 
             if (!getStructClass().isAssignableFrom(method.getReturnType())) {
@@ -421,7 +422,7 @@ else if (isValidateSetter(method)) {
                     parameters = ImmutableList.of(new ParameterInjection(type, 0, annotation, ReflectionHelper.extractFieldName(method), parameterType));
                 }
                 fields.addAll(parameters);
-                methodInjections.add(new MethodInjection(method, parameters));
+                methodInjections.add(new MethodInjection(implementingMethod(method), parameters));
             }
             else {
                 metadataErrors.addError("Inject method %s.%s is not allowed on struct class, since struct has a builder", clazz.getName(), method.getName());
@@ -738,5 +739,33 @@ public ThriftParameterInjection apply(ParameterInjection injection)
             }
         });
     }
+
+    /**
+     * Constructors and methods must be accessible outside their package for reflective codec.
+     */
+    private void setAccessibleIfNeeded(AccessibleObject object)
+    {
+        if (builderType != null && !Modifier.isPublic(getBuilderClass().getModifiers())) {
+            object.setAccessible(true);
+        }
+    }
+
+    /**
+     * Swift-annotated methods may be on an interface. This returns the implementing method.
+     */
+    private Method implementingMethod(Method method)
+    {
+        if (!method.getDeclaringClass().isInterface()) {
+            return method;
+        }
+        try {
+            method = getBuilderClass().getMethod(method.getName(), method.getParameterTypes());
+            setAccessibleIfNeeded(method);
+            return method;
+        }
+        catch (NoSuchMethodException e) {
+            throw new AssertionError(e);
+        }
+    }
 }
 
diff --git a/swift-codec/src/test/java/com/facebook/swift/codec/AbstractThriftCodecManagerTest.java b/swift-codec/src/test/java/com/facebook/swift/codec/AbstractThriftCodecManagerTest.java
index 43e80dd..a594657 100644
--- a/swift-codec/src/test/java/com/facebook/swift/codec/AbstractThriftCodecManagerTest.java
+++ b/swift-codec/src/test/java/com/facebook/swift/codec/AbstractThriftCodecManagerTest.java
@@ -215,7 +215,15 @@ public void testBuilder()
             throws Exception
     {
         BonkBuilder bonkBuilder = new BonkBuilder("message", 42);
-        testRoundTripSerialize(bonkBuilder, new TCompactProtocol.Factory());
+        testRoundTripSerialize(TypeToken.of(BonkBuilder.class), bonkBuilder, new TCompactProtocol.Factory());
+    }
+
+    @Test
+    public void testGenerated()
+        throws Exception
+    {
+        BonkGenerated bonkGenerated = BonkGenerated.builder().message("message").type(42).build();
+        testRoundTripSerialize(TypeToken.of(BonkGenerated.class), bonkGenerated, new TCompactProtocol.Factory());
     }
 
     @Test
diff --git a/swift-codec/src/test/java/com/facebook/swift/codec/BonkGenerated.java b/swift-codec/src/test/java/com/facebook/swift/codec/BonkGenerated.java
new file mode 100644
index 0000000..2635d05
--- /dev/null
+++ b/swift-codec/src/test/java/com/facebook/swift/codec/BonkGenerated.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2015 Facebook, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License. You may obtain
+ * a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+package com.facebook.swift.codec;
+
+@ThriftStruct(value = "BonkGenerated", builder = Generated_BonkGenerated.Builder.class)
+public abstract class BonkGenerated
+{
+
+    public static Builder builder()
+    {
+        return new Generated_BonkGenerated.Builder();
+    }
+
+    @ThriftField(value = 1)
+    public abstract String message();
+
+    @ThriftField(value = 2)
+    public abstract int type();
+
+    public interface Builder
+    {
+        @ThriftField
+        Builder message(String message);
+
+        @ThriftField
+        Builder type(int type);
+
+        @ThriftConstructor
+        BonkGenerated build();
+    }
+}
+
+final class Generated_BonkGenerated extends BonkGenerated
+{
+
+    private final String message;
+    private final int type;
+
+    private Generated_BonkGenerated(String message, int type)
+    {
+        this.message = message;
+        this.type = type;
+    }
+
+    @ThriftField(value = 1)
+    @Override
+    public String message()
+    {
+        return message;
+    }
+
+    @ThriftField(value = 2)
+    @Override
+    public int type()
+    {
+        return type;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "BonkGenerated{"
+            + "message=" + message + ", "
+            + "type=" + type
+            + "}";
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) {
+            return true;
+        }
+        if (o instanceof BonkGenerated) {
+            BonkGenerated that = (BonkGenerated) o;
+            return ((this.message == null) ? (that.message() == null) : this.message.equals(that.message()))
+                && (this.type == that.type());
+        }
+        return false;
+    }
+
+    @Override
+    public int hashCode()
+    {
+        int h = 1;
+        h *= 1000003;
+        h ^= (message == null) ? 0 : message.hashCode();
+        h *= 1000003;
+        h ^= type;
+        return h;
+    }
+
+    static final class Builder implements BonkGenerated.Builder
+    {
+        private String message;
+        private int type;
+
+        @Override
+        public BonkGenerated.Builder message(String message)
+        {
+            this.message = message;
+            return this;
+        }
+
+        @Override
+        public BonkGenerated.Builder type(int type)
+        {
+            this.type = type;
+            return this;
+        }
+
+        @Override
+        public BonkGenerated build()
+        {
+            return new Generated_BonkGenerated(message, type);
+        }
+    }
+}
